// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id          String      @id @default(uuid())
  name        String      @unique
  inventories Inventory[]
  invoices    Invoice[]

  @@map("stores")
}

model Product {
  id            String        @id @default(uuid())
  name          String        @unique
  price         Float
  status        Status        @default(inactive)
  invoice_items InvoiceItem[]
  inventories   Inventory[]
  product_logs  ProductLog[]

  @@map("products")
}

model Inventory {
  balance       Int           @default(0)
  store         Store         @relation(fields: [store_id], references: [id])
  store_id      String
  product       Product       @relation(fields: [product_id], references: [id])
  product_id    String

  @@id([store_id, product_id])
  @@map("inventories")
}

model Invoice {
  id            String        @id @default(uuid())
  created_at    DateTime      @default(now())
  total         Float         @default(0)
  store         Store         @relation(fields: [store_id], references: [id])
  store_id      String
  invoice_items InvoiceItem[]

  @@map("invoices")
}

model InvoiceItem {
  amount     Int
  price      Float
  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  invoice    Invoice @relation(fields: [invoice_id], references: [id])
  invoice_id String

  @@id([invoice_id, product_id])
  @@map("invoice_items")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now())

  @@map("users")
}

model ProductLog {
  id            String    @id @default(uuid())
  created_at    DateTime  @default(now())
  product_id    String
  product       Product   @relation(fields: [product_id], references: [id])
  name          String
  price         Float
  status        Status
}

enum Status {
  active
  inactive
}

model Category {
  id String @id @default(uuid())
  name String
}